use super::*;

const PUZZLE1: Puzzle = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9],
];

const NOTES1: Notes = [
    [
        0, 0, 0b000_001_011, 0b000_100_010, 0, 0b010_101_010, 0b110_001_001, 0b100_001_011,
        0b010_001_010,
    ],
    [0, 0b001_001_010, 0b001_001_010, 0, 0, 0, 0b011_001_100, 0b000_001_110, 0b011_001_010],
    [
        0b000_000_011, 0, 0, 0b000_000_110, 0b000_001_100, 0b000_001_010, 0b001_011_101, 0,
        0b001_001_010,
    ],
    [
        0, 0b000_010_011, 0b100_010_011, 0b101_010_000, 0, 0b001_001_001, 0b101_011_000, 0b100_011_010,
        0,
    ],
    [0, 0b000_010_010, 0b100_110_010, 0, 0b000_010_000, 0, 0b101_010_000, 0b100_010_010, 0],
    [
        0, 0b000_010_001, 0b100_010_101, 0b100_010_000, 0, 0b000_001_001, 0b110_011_000, 0b100_011_000,
        0,
    ],
    [
        0b100_000_101, 0, 0b101_011_101, 0b001_010_100, 0b000_010_100, 0b001_000_000, 0, 0,
        0b000_001_000,
    ],
    [0b000_000_110, 0b011_000_010, 0b001_000_110, 0, 0, 0, 0b000_100_100, 0b000_000_100, 0],
    [
        0b000_000_111, 0b000_011_011, 0b000_011_111, 0b000_110_110, 0, 0b000_100_010,
        0b000_101_101, 0, 0,
    ],
];

fn check_notes(notes: &Notes, expected: &Notes) {
    for (row, row_pos) in notes.iter().enumerate() {
        for (col, note) in row_pos.iter().enumerate() {
            assert!(
                &note.eq(&expected[row][col]),
                "Wrong note on row:{}, col:{}, actual:{:b}, expected:{:b}",
                row,
                col,
                &note,
                &expected[row][col]
            );
        }
    }
}

#[test]
fn test_notes() {
    let mut sut = NotesManager::new(PUZZLE1);
    sut.fill();
    check_notes(&sut.get(), &NOTES1);
}

fn prepare_obvious_pair() -> NotesManager {
    let puzzle: Puzzle = [
        [0, 6, 0, 0, 0, 0, 5, 7, 0],
        [3, 0, 0, 7, 0, 0, 0, 0, 6],
        [0, 0, 7, 0, 1, 8, 0, 0, 0],
        [0, 0, 6, 9, 0, 0, 0, 0, 2],
        [0, 0, 3, 0, 0, 0, 7, 0, 0],
        [7, 0, 0, 0, 0, 1, 9, 0, 0],
        [0, 0, 0, 3, 4, 0, 2, 0, 0],
        [6, 0, 0, 0, 0, 5, 0, 0, 4],
        [0, 5, 8, 0, 0, 0, 0, 3, 0],
    ];

    let notes: Notes = [
        [
            0b110_001_011, 0, 0b100_001_011, 0b000_001_010, 0b100_000_110, 0b100_001_110, 0, 0,
            0b110_000_101,
        ],
        [
            0, 0b110_001_011, 0b100_011_011, 0, 0b100_010_010, 0b100_001_010, 0b010_001_001, 0b110_001_011,
            0,
        ],
        [
            0b100_011_010, 0b100_001_010, 0, 0b000_111_010, 0, 0, 0b000_001_100, 0b100_001_010,
            0b100_000_100,
        ],
        [
            0b010_011_001, 0b010_001_001, 0, 0, 0b011_010_100, 0b001_001_100, 0b010_001_101, 0b010_011_001,
            0,
        ],
        [
            0b110_011_011, 0b110_001_011, 0, 0b010_111_010, 0b010_110_010, 0b000_101_010, 0, 0b010_111_001,
            0b010_010_001,
        ],
        [
            0, 0b010_001_010, 0b000_011_010, 0b010_111_010, 0b010_110_110, 0, 0, 0b010_111_000,
            0b010_010_100,
        ],
        [
            0b100_000_001, 0b101_000_001, 0b100_000_001, 0, 0, 0b101_100_000, 0, 0b110_110_001,
            0b111_010_001,
        ],
        [
            0, 0b101_000_111, 0b100_000_011, 0b010_000_011, 0b111_000_010, 0, 0b010_000_001, 0b110_000_001,
            0,
        ],
        [
            0b100_001_011, 0, 0, 0b000_100_011, 0b101_100_010, 0b101_100_010, 0b000_100_001, 0,
            0b101_000_001,
        ],
    ];

    let mut sut = NotesManager::new(puzzle);
    sut.fill();
    check_notes(&sut.get(), &notes);
    sut
}

#[test]
fn test_obvious_pairs() {
    let mut sut = prepare_obvious_pair();

    let notes: Notes = [
        [
            0b110_001_011, 0, 0b100_001_011, 0b000_001_010, 0b100_000_110, 0b100_001_110, 0, 0,
            0b110_000_101,
        ],
        [
            0, 0b110_001_011, 0b100_011_011, 0, 0b100_010_010, 0b100_001_010, 0b010_001_001, 0b110_001_011,
            0,
        ],
        [
            0b100_011_010, 0b100_001_010, 0, 0b000_111_010, 0, 0, 0b000_001_100, 0b100_001_010,
            0b100_000_100,
        ],
        [
            0b010_011_001, 0b010_001_001, 0, 0, 0b011_010_100, 0b001_001_100, 0b010_001_101, 0b010_011_001,
            0,
        ],
        [
            0b110_011_011, 0b110_001_011, 0, 0b010_111_010, 0b010_110_010, 0b000_101_010, 0, 0b010_111_001,
            0b010_010_001,
        ],
        [
            0, 0b010_001_010, 0b000_011_010, 0b010_111_010, 0b010_110_110, 0, 0, 0b010_111_000,
            0b010_010_100,
        ],
        [
            0b100_000_001, 0b001_000_000, 0b100_000_001, 0, 0, 0b001_100_000, 0, 0b010_110_000,
            0b011_010_000,
        ],
        [
            0, 0b001_000_110, 0b000_000_010, 0b010_000_011, 0b111_000_010, 0, 0b010_000_001, 0b110_000_001,
            0,
        ],
        [
            0b000_001_010, 0, 0, 0b000_100_011, 0b101_100_010, 0b101_100_010, 0b000_100_001, 0,
            0b101_000_001,
        ],
    ];

    sut.set_obvious_pairs();
    check_notes(&sut.get(), &notes);
    sut.adjust(6, 1, 7);
    sut.adjust(7, 2, 2);
    sut.adjust(7, 1, 3);

    let notes: Notes = [
        [
            0b110_001_011, 0, 0b100_001_001, 0b000_001_010, 0b100_000_110, 0b100_001_110, 0, 0,
            0b110_000_101,
        ],
        [
            0, 0b110_001_011, 0b100_011_001, 0, 0b100_010_010, 0b100_001_010, 0b010_001_001, 0b110_001_011,
            0,
        ],
        [
            0b100_011_010, 0b100_001_010, 0, 0b000_111_010, 0, 0, 0b000_001_100, 0b100_001_010,
            0b100_000_100,
        ],
        [
            0b010_011_001, 0b010_001_001, 0, 0, 0b011_010_100, 0b001_001_100, 0b010_001_101, 0b010_011_001,
            0,
        ],
        [
            0b110_011_011, 0b110_001_011, 0, 0b010_111_010, 0b010_110_010, 0b000_101_010, 0, 0b010_111_001,
            0b010_010_001,
        ],
        [
            0, 0b010_001_010, 0b000_011_000, 0b010_111_010, 0b010_110_110, 0, 0, 0b010_111_000,
            0b010_010_100,
        ],
        [0b100_000_001, 0, 0b100_000_001, 0, 0, 0b000_100_000, 0, 0b010_110_000, 0b010_010_000],
        [0, 0, 0, 0b010_000_001, 0b111_000_000, 0, 0b010_000_001, 0b110_000_001, 0],
        [
            0b000_001_000, 0, 0, 0b000_100_011, 0b101_100_010, 0b101_100_010, 0b000_100_001, 0,
            0b101_000_001,
        ],
    ];

    check_notes(&sut.get(), &notes);
}

#[test]
fn test_obvious_pairs_helpers() {
    let mut sut = prepare_obvious_pair();
    let mut notes: Notes = [
        [
            0b110_001_011, 0, 0b100_001_011, 0b000_001_010, 0b100_000_110, 0b100_001_110, 0, 0,
            0b110_000_101,
        ],
        [
            0, 0b110_001_011, 0b100_011_011, 0, 0b100_010_010, 0b100_001_010, 0b010_001_001, 0b110_001_011,
            0,
        ],
        [
            0b100_011_010, 0b100_001_010, 0, 0b000_111_010, 0, 0, 0b000_001_100, 0b100_001_010,
            0b100_000_100,
        ],
        [
            0b010_011_001, 0b010_001_001, 0, 0, 0b011_010_100, 0b001_001_100, 0b010_001_101, 0b010_011_001,
            0,
        ],
        [
            0b110_011_011, 0b110_001_011, 0, 0b010_111_010, 0b010_110_010, 0b000_101_010, 0, 0b010_111_001,
            0b010_010_001,
        ],
        [
            0, 0b010_001_010, 0b000_011_010, 0b010_111_010, 0b010_110_110, 0, 0, 0b010_111_000,
            0b010_010_100,
        ],
        [
            0b100_000_001, 0b001_000_000, 0b100_000_001, 0, 0, 0b001_100_000, 0, 0b010_110_000,
            0b011_010_000,
        ],
        [
            0, 0b101_000_111, 0b100_000_011, 0b010_000_011, 0b111_000_010, 0, 0b010_000_001, 0b110_000_001,
            0,
        ],
        [
            0b100_001_011, 0, 0, 0b000_100_011, 0b101_100_010, 0b101_100_010, 0b000_100_001, 0,
            0b101_000_001,
        ],
    ];

    sut.clear_notes_obvious_pair_based(&get_row_coordinates(6), 0b100_000_001);
    check_notes(&sut.get(), &notes);
    notes[7] = [
        0, 0b001_000_110, 0b000_000_010, 0b010_000_011, 0b111_000_010, 0, 0b010_000_001, 0b110_000_001,
        0,
    ];
    notes[8] = [
        0b000_001_010, 0, 0, 0b000_100_011, 0b101_100_010, 0b101_100_010, 0b000_100_001, 0,
        0b101_000_001,
    ];
    assert!(sut.clear_notes_obvious_pair_based(&get_square_coordinates((2, 0)), 0b100_000_001));
    check_notes(&sut.get(), &notes);
    assert!(!sut.clear_notes_obvious_pair_based(&get_square_coordinates((2, 0)), 0b100_000_001));
}
