use super::*;

const LABELS1: Labels = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9],
];

const POSSIBILITIES1: Possibilities = [
    [
        0, 0, 0b000_001_011, 0b000_100_010, 0, 0b010_101_010, 0b110_001_001, 0b100_001_011,
        0b010_001_010,
    ],
    [0, 0b001_001_010, 0b001_001_010, 0, 0, 0, 0b011_001_100, 0b000_001_110, 0b011_001_010],
    [
        0b000_000_011, 0, 0, 0b000_000_110, 0b000_001_100, 0b000_001_010, 0b001_011_101, 0,
        0b001_001_010,
    ],
    [
        0, 0b000_010_011, 0b100_010_011, 0b101_010_000, 0, 0b001_001_001, 0b101_011_000, 0b100_011_010,
        0,
    ],
    [0, 0b000_010_010, 0b100_110_010, 0, 0b000_010_000, 0, 0b101_010_000, 0b100_010_010, 0],
    [
        0, 0b000_010_001, 0b100_010_101, 0b100_010_000, 0, 0b000_001_001, 0b110_011_000, 0b100_011_000,
        0,
    ],
    [
        0b100_000_101, 0, 0b101_011_101, 0b001_010_100, 0b000_010_100, 0b001_000_000, 0, 0,
        0b000_001_000,
    ],
    [0b000_000_110, 0b011_000_010, 0b001_000_110, 0, 0, 0, 0b000_100_100, 0b000_000_100, 0],
    [
        0b000_000_111, 0b000_011_011, 0b000_011_111, 0b000_110_110, 0, 0b000_100_010,
        0b000_101_101, 0, 0,
    ],
];

const POSSIBILITIES1_INITIAL: Possibilities = [
    [
        0, 0, 0b111_111_111, 0b111_111_111, 0, 0b111_111_111, 0b111_111_111, 0b111_111_111,
        0b111_111_111,
    ],
    [0, 0b111_111_111, 0b111_111_111, 0, 0, 0, 0b111_111_111, 0b111_111_111, 0b111_111_111],
    [
        0b111_111_111, 0, 0, 0b111_111_111, 0b111_111_111, 0b111_111_111, 0b111_111_111, 0,
        0b111_111_111,
    ],
    [
        0, 0b111_111_111, 0b111_111_111, 0b111_111_111, 0, 0b111_111_111, 0b111_111_111, 0b111_111_111,
        0,
    ],
    [0, 0b111_111_111, 0b111_111_111, 0, 0b111_111_111, 0, 0b111_111_111, 0b111_111_111, 0],
    [
        0, 0b111_111_111, 0b111_111_111, 0b111_111_111, 0, 0b111_111_111, 0b111_111_111, 0b111_111_111,
        0,
    ],
    [
        0b111_111_111, 0, 0b111_111_111, 0b111_111_111, 0b111_111_111, 0b111_111_111, 0, 0,
        0b111_111_111,
    ],
    [0b111_111_111, 0b111_111_111, 0b111_111_111, 0, 0, 0, 0b111_111_111, 0b111_111_111, 0],
    [
        0b111_111_111, 0b111_111_111, 0b111_111_111, 0b111_111_111, 0, 0b111_111_111,
        0b111_111_111, 0, 0,
    ],
];

fn check_possibilities(possibilities: &Possibilities, expected: &Possibilities) {
    for (row, row_pos) in possibilities.iter().enumerate() {
        for (col, possibility) in row_pos.iter().enumerate() {
            assert!(
                &possibility.eq(&expected[row][col]),
                "Wrong possibility on row:{}, col:{}, found:{:b}, expected:{:b}",
                row,
                col,
                &possibility,
                &expected[row][col]
            );
        }
    }
}

#[test]
fn test_intial_possibilities() {
    let mut sut = Solver::new(LABELS1);
    check_possibilities(&sut.get_possibilities(), &POSSIBILITIES1_INITIAL);
}

#[test]
fn test_possibilities() {
    let mut sut = Solver::new(LABELS1);
    sut.solve();
    check_possibilities(&sut.get_possibilities(), &POSSIBILITIES1);
}

const LABELS2: Labels = [
    [3, 0, 9, 0, 0, 0, 0, 0, 2],
    [0, 0, 0, 0, 0, 7, 6, 0, 0],
    [0, 6, 0, 0, 0, 2, 9, 0, 0],
    [0, 9, 0, 0, 5, 0, 0, 7, 0],
    [6, 0, 2, 0, 0, 0, 3, 0, 8],
    [0, 1, 0, 0, 4, 0, 0, 2, 0],
    [0, 0, 5, 2, 0, 0, 0, 4, 0],
    [0, 0, 1, 9, 0, 0, 0, 0, 0],
    [8, 0, 0, 0, 0, 0, 2, 0, 6],
];

const LABELS3: Labels = [
    [0, 4, 3, 0, 8, 0, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 4, 0],
    [6, 0, 0, 5, 0, 0, 0, 7, 3],
    [0, 0, 0, 0, 0, 2, 0, 0, 0],
    [0, 0, 4, 0, 0, 0, 2, 0, 0],
    [0, 0, 0, 3, 0, 0, 0, 0, 0],
    [8, 2, 0, 0, 0, 9, 0, 0, 5],
    [0, 5, 0, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 5, 0, 8, 2, 0],
];
