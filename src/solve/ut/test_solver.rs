use super::*;

const PUZZLE1: Puzzle = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9],
];

const SOLUTION1: Puzzle = [
    [5, 3, 4, 6, 7, 8, 9, 1, 2],
    [6, 7, 2, 1, 9, 5, 3, 4, 8],
    [1, 9, 8, 3, 4, 2, 5, 6, 7],
    [8, 5, 9, 7, 6, 1, 4, 2, 3],
    [4, 2, 6, 8, 5, 3, 7, 9, 1],
    [7, 1, 3, 9, 2, 4, 8, 5, 6],
    [9, 6, 1, 5, 3, 7, 2, 8, 4],
    [2, 8, 7, 4, 1, 9, 6, 3, 5],
    [3, 4, 5, 2, 8, 6, 1, 7, 9],
];

fn check_solution(input: &Puzzle, expected: &Puzzle) {
    for (row, row_input) in input.iter().enumerate() {
        for (col, cell) in row_input.iter().enumerate() {
            assert!(
                &cell.eq(&expected[row][col]),
                "Wrong solution on row:{}, col:{}, actual:{}, expected:{}",
                row,
                col,
                &cell,
                &expected[row][col]
            );
        }
    }
}

fn test_solve(puzzle: &Puzzle, expected: &Puzzle) {
    let mut sut = Solver::new(*puzzle);
    sut.solve();
    check_solution(&sut.get_solution(), &expected);
}

#[test]
fn test_obvious_puzzle() {
    test_solve(&PUZZLE1, &SOLUTION1);
}

#[test]
fn test_obvious_puzzle_2() {
    let puzzle2: Puzzle = [
        [0, 0, 1, 7, 0, 0, 0, 5, 0],
        [0, 0, 0, 4, 6, 0, 0, 3, 0],
        [0, 0, 8, 0, 9, 1, 0, 0, 6],
        [3, 1, 9, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 5, 0, 8, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 7, 6, 4],
        [8, 0, 0, 1, 3, 0, 9, 0, 0],
        [0, 4, 0, 0, 5, 2, 0, 0, 0],
        [0, 2, 0, 0, 0, 6, 8, 0, 0],
    ];

    let solution2: Puzzle = [
        [4, 6, 1, 7, 8, 3, 2, 5, 9],
        [7, 9, 2, 4, 6, 5, 1, 3, 8],
        [5, 3, 8, 2, 9, 1, 4, 7, 6],
        [3, 1, 9, 6, 4, 7, 5, 8, 2],
        [6, 7, 4, 5, 2, 8, 3, 9, 1],
        [2, 8, 5, 3, 1, 9, 7, 6, 4],
        [8, 5, 6, 1, 3, 4, 9, 2, 7],
        [9, 4, 7, 8, 5, 2, 6, 1, 3],
        [1, 2, 3, 9, 7, 6, 8, 4, 5],
    ];

    test_solve(&puzzle2, &solution2);
}

#[test]
fn test_easy_puzzle() {
    let puzzle: Puzzle = [
        [0, 1, 5, 3, 0, 0, 0, 0, 0],
        [0, 0, 2, 6, 0, 0, 0, 0, 8],
        [3, 0, 0, 2, 0, 0, 1, 0, 5],
        [0, 0, 0, 0, 0, 0, 0, 5, 2],
        [0, 7, 0, 1, 0, 8, 0, 9, 0],
        [2, 8, 0, 0, 0, 0, 0, 0, 0],
        [6, 0, 3, 0, 0, 4, 0, 0, 9],
        [4, 0, 0, 0, 0, 2, 6, 0, 0],
        [0, 0, 0, 0, 0, 3, 5, 8, 0],
    ];

    let solution: Puzzle = [
        [8, 1, 5, 3, 4, 7, 9, 2, 6],
        [9, 4, 2, 6, 5, 1, 3, 7, 8],
        [3, 6, 7, 2, 8, 9, 1, 4, 5],
        [1, 3, 4, 7, 9, 6, 8, 5, 2],
        [5, 7, 6, 1, 2, 8, 4, 9, 3],
        [2, 8, 9, 4, 3, 5, 7, 6, 1],
        [6, 5, 3, 8, 7, 4, 2, 1, 9],
        [4, 9, 8, 5, 1, 2, 6, 3, 7],
        [7, 2, 1, 9, 6, 3, 5, 8, 4],
    ];

    test_solve(&puzzle, &solution);
}

#[test]
fn test_medium_puzzle() {
    let puzzle: Puzzle = [
        [0, 2, 0, 4, 0, 0, 3, 0, 0],
        [0, 0, 0, 8, 0, 7, 0, 0, 0],
        [0, 0, 3, 0, 0, 2, 0, 5, 0],
        [6, 4, 0, 0, 0, 0, 0, 3, 7],
        [0, 0, 7, 0, 0, 0, 9, 0, 0],
        [2, 5, 0, 0, 0, 0, 0, 8, 1],
        [0, 1, 0, 2, 0, 0, 6, 0, 0],
        [0, 0, 0, 1, 0, 8, 0, 0, 0],
        [0, 0, 4, 0, 0, 9, 0, 1, 0],
    ];

    let solution: Puzzle = [
        [8, 2, 1, 4, 9, 5, 3, 7, 6],
        [5, 9, 6, 8, 3, 7, 1, 2, 4],
        [4, 7, 3, 6, 1, 2, 8, 5, 9],
        [6, 4, 8, 9, 2, 1, 5, 3, 7],
        [1, 3, 7, 5, 8, 4, 9, 6, 2],
        [2, 5, 9, 3, 7, 6, 4, 8, 1],
        [7, 1, 5, 2, 4, 3, 6, 9, 8],
        [9, 6, 2, 1, 5, 8, 7, 4, 3],
        [3, 8, 4, 7, 6, 9, 2, 1, 5],
    ];

    test_solve(&puzzle, &solution);
}

#[ignore]
#[test]
fn test_hard_puzzle() {
    let puzzle: Puzzle = [
        [3, 1, 0, 0, 0, 0, 2, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 0, 9],
        [0, 0, 8, 0, 6, 2, 0, 0, 3],
        [0, 8, 0, 4, 7, 0, 0, 0, 0],
        [0, 0, 7, 0, 0, 0, 6, 0, 0],
        [0, 0, 0, 0, 8, 1, 0, 9, 0],
        [7, 0, 0, 8, 3, 0, 9, 0, 0],
        [8, 0, 5, 0, 0, 0, 0, 0, 0],
        [0, 0, 6, 0, 0, 0, 0, 4, 7],
    ];

    //TODO: solve
    let solution: Puzzle = [
        [3, 1, 4, 0, 0, 0, 2, 0, 0],
        [0, 0, 2, 0, 0, 0, 1, 0, 9],
        [0, 0, 8, 1, 6, 2, 4, 0, 3],
        [0, 8, 9, 4, 7, 0, 5, 0, 0],
        [0, 0, 7, 0, 0, 0, 6, 0, 0],
        [0, 0, 3, 0, 8, 1, 7, 9, 0],
        [7, 0, 1, 8, 3, 0, 9, 0, 0],
        [8, 0, 5, 0, 0, 0, 3, 0, 0],
        [0, 3, 6, 0, 1, 0, 8, 4, 7],
    ];

    // let solution: Puzzle = [
    //     [3, 1, 4, 7, 5, 9, 2, 8, 6],
    //     [6, 7, 2, 3, 4, 8, 1, 5, 9],
    //     [5, 9, 8, 1, 6, 2, 4, 7, 3],
    //     [1, 8, 9, 4, 7, 6, 5, 2, 3],
    //     [4, 5, 7, 9, 2, 3, 6, 1, 8],
    //     [2, 6, 3, 5, 8, 1, 7, 9, 4],
    //     [7, 2, 1, 8, 3, 4, 9, 6, 5],
    //     [8, 4, 5, 6, 9, 7, 3, 2, 1],
    //     [9, 3, 6, 2, 1, 5, 8, 4, 7],
    // ];

    test_solve(&puzzle, &solution);
}
